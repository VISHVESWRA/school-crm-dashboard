import React, { useState } from 'react';

// Material-UI TextField component simulation
const TextField = ({ 
  label, 
  type = 'text', 
  name, 
  value, 
  onChange, 
  error, 
  helperText, 
  placeholder,
  variant = 'outlined',
  required = false,
  className = '',
  size = 'medium',
  ...register
}) => {
  const sizeClasses = size === 'small' 
    ? 'px-3 py-2.5 text-sm' 
    : 'px-4 py-3.5 text-base';
  
  const baseClasses = `w-full border rounded-lg transition-all duration-200 focus:outline-none bg-white ${sizeClasses}`;
  const errorClasses = error 
    ? 'border-red-500 focus:border-red-500 focus:ring-2 focus:ring-red-100' 
    : 'border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-50 hover:border-gray-400';

  return (
    <div className={`w-full ${className}`}>
      <div className="relative">
        <input
          type={type}
          name={name}
          value={value}
          onChange={onChange}
          placeholder={placeholder || (label ? `${label}${required ? ' *' : ''}` : '')}
          required={required}
          className={`${baseClasses} ${errorClasses} placeholder-gray-500`}
          {...register}
        />
      </div>
      {helperText && (
        <p className={`mt-1.5 text-sm ${error ? 'text-red-600' : 'text-gray-500'}`}>
          {helperText}
        </p>
      )}
    </div>
  );
};

// Material-UI Button component simulation
const Button = ({ 
  children, 
  type = 'button', 
  variant = 'contained', 
  className = '',
  onClick,
  ...props 
}) => {
  const baseClasses = 'font-medium transition-all duration-200 focus:outline-none focus:ring-2';
  const variantClasses = variant === 'contained' 
    ? 'bg-gray-900 hover:bg-gray-800 text-white shadow-md hover:shadow-lg' 
    : 'border border-gray-300 hover:bg-gray-50 text-gray-700';
  
  return (
    <button
      type={type}
      onClick={onClick}
      className={`${baseClasses} ${variantClasses} ${className}`}
      {...props}
    >
      {children}
    </button>
  );
};

// Material-UI Box component simulation
const Box = ({ 
  component = 'div', 
  children, 
  onSubmit, 
  sx = {},
  noValidate,
  autoComplete,
  className = ''
}) => {
  const Component = component;
  
  return (
    <Component
      onSubmit={onSubmit}
      noValidate={noValidate}
      autoComplete={autoComplete}
      className={`${className} space-y-4`}
      style={{
        '& > :not(style)': {
          margin: '8px',
          width: '25ch'
        },
        ...sx
      }}
    >
      {children}
    </Component>
  );
};

const ResponsiveLoginForm = () => {
  const [formData, setFormData] = useState({ name: '', password: '' });
  const [errors, setErrors] = useState({});

  // Simulate react-hook-form register function
  const register = (name, validation) => ({
    name,
    onChange: (e) => {
      const { name, value } = e.target;
      setFormData(prev => ({ ...prev, [name]: value }));
      // Clear error when user starts typing
      if (errors[name]) {
        setErrors(prev => ({ ...prev, [name]: '' }));
      }
    },
    value: formData[name] || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    const newErrors = {};
    
    if (!formData.name?.trim()) {
      newErrors.name = { message: 'Required' };
    }
    if (!formData.password?.trim()) {
      newErrors.password = { message: 'Required' };
    }
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    
    console.log('Form submitted:', formData);
    // Handle successful submission
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-2 sm:p-4 md:p-6 lg:p-10">
      <div className="flex w-full max-w-5xl mx-auto bg-white rounded-xl sm:rounded-2xl md:rounded-3xl lg:rounded-4xl shadow-xl overflow-hidden h-[400px] sm:h-[500px] md:h-[600px] lg:h-[700px]">

        {/* Left Side - Brand Section */}
        <div className="w-1/2 bg-pink-200 flex flex-col items-center justify-center p-2 sm:p-4 md:p-6 lg:p-10 rounded-l-xl sm:rounded-l-2xl md:rounded-l-3xl lg:rounded-l-4xl">
          <div className="flex flex-col items-center mb-2 sm:mb-4 md:mb-6 lg:mb-8">
            <div className="text-center mb-2 sm:mb-3 md:mb-4">
              <h1 className="text-sm sm:text-lg md:text-2xl lg:text-3xl xl:text-4xl font-bold text-[#C72571] mb-0 pb-1 sm:pb-2 border-b border-b-gray-400 sm:border-b-2 inline-block">
                Nschool
              </h1>
            </div>

            <div className="flex justify-between w-full max-w-[120px] sm:max-w-[160px] md:max-w-[200px] lg:max-w-xs px-1 text-[#8B0F4B] text-xs sm:text-sm md:text-base font-bold mb-1 sm:mb-2">
              {"Academy".split("").map((letter, i) => (
                <span className="mb-0 transition-transform hover:scale-110 text-xs sm:text-sm md:text-base" key={i}>
                  {letter}
                </span>
              ))}
            </div>
            
            <div className="text-[#8B0F4B] text-center">
              <h6 className="mt-1 text-xs sm:text-sm md:text-base font-medium">Program Your Career</h6>
            </div>
          </div>

          <div className="w-16 h-16 sm:w-24 sm:h-24 md:w-40 md:h-40 lg:w-60 lg:h-60 xl:w-80 xl:h-80 flex items-center justify-center">
            {/* Placeholder for image */}
            <div className="w-full h-full bg-white/30 rounded-lg sm:rounded-xl md:rounded-2xl flex items-center justify-center border border-white/50 sm:border-2">
              <div className="text-lg sm:text-2xl md:text-4xl lg:text-5xl xl:text-6xl text-[#C72571]/40">
                ðŸŽ“
              </div>
            </div>
          </div>
        </div>

        {/* Right Side - Login Form */}
        <div className="w-1/2 bg-pink-100 flex flex-col justify-center p-2 sm:p-4 md:p-6 lg:p-8 xl:p-12 rounded-r-xl sm:rounded-r-2xl md:rounded-r-3xl lg:rounded-r-4xl">
          <div className="w-full max-w-sm mx-auto">
            <h2 className="text-sm sm:text-base md:text-lg lg:text-xl xl:text-2xl font-semibold text-gray-800 mb-3 sm:mb-4 md:mb-6 lg:mb-8 relative">
              <span className="absolute -top-1 sm:-top-2 md:-top-3 left-0 w-4 sm:w-6 md:w-8 h-0.5 sm:h-0.5 md:h-1 bg-[#8B0F4B] rounded-full"></span>
              Login
            </h2>

            <Box
              component="form"
              onSubmit={handleSubmit}
              sx={{ "& > :not(style)": { m: 1, width: "25ch" } }}
              noValidate
              autoComplete="off"
              className="w-full"
            >
              <div className="w-auto space-y-4 sm:space-y-6">
                <TextField
                  label="Name"
                  variant="outlined"
                  required
                  error={!!errors.name}
                  helperText={errors.name?.message}
                  {...register("name", { required: "Required" })}
                  className="w-full mb-4"
                />

                <TextField
                  label="Password"
                  type="password"
                  variant="outlined"
                  required
                  error={!!errors.password}
                  helperText={errors.password?.message}
                  {...register("password", { required: "Required" })}
                  className="w-full mb-4"
                />

                <div className="flex justify-end pt-2">
                  <Button 
                    type="submit" 
                    variant="contained" 
                    className="bg-black hover:bg-gray-800 rounded-3xl text-white px-6 py-2.5 sm:px-8 sm:py-3"
                  >
                    Submit
                  </Button>
                </div>
              </div>
            </Box>

            {/* Additional Options - Hidden on very small screens */}
            <div className="hidden sm:block mt-3 md:mt-4 lg:mt-6 pt-3 md:pt-4 lg:pt-6 border-t border-pink-200/50">
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between text-xs sm:text-sm gap-2 sm:gap-0">
                <label className="flex items-center">
                  <input 
                    type="checkbox" 
                    className="w-3 h-3 sm:w-4 sm:h-4 text-[#C72571] bg-gray-100 border-gray-300 rounded focus:ring-[#C72571] focus:ring-1"
                  />
                  <span className="ml-1 sm:ml-2 text-gray-600">Remember me</span>
                </label>
                <a href="#" className="text-[#C72571] hover:text-[#8B0F4B] font-medium transition-colors duration-200 text-xs sm:text-sm">
                  Forgot password?
                </a>
              </div>
            </div>

            {/* Mobile-only forgot password for very small screens */}
            <div className="sm:hidden mt-2 text-center">
              <a href="#" className="text-[#C72571] hover:text-[#8B0F4B] font-medium text-xs transition-colors duration-200">
                Forgot?
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResponsiveLoginForm;